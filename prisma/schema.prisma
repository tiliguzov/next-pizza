generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url = env("POSTGRES_URL")
    //directUrl = env("POSTGRES_URL_NON_POOLING") 
}

model User {
    id Int @id @default(autoincrement())

    fullName String
    email String @unique
    password String
    role UserRole @default(USER)
    verified DateTime?

    provider String?
    providerId String?

    cart Cart?
    orders Order[]
    verificationCode VerificationCode?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Category {
    id Int @id @default(autoincrement())
    name String @unique
    products Product[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Product {
    id Int @id @default(autoincrement())

    name String @db.VarChar(255)
    imageUrl String

    ingredients Ingredient[]
    variations ProductVariation[]

    category Category @relation(fields: [categoryId], references: [id])
    categoryId Int

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model ProductVariation {
    id Int @id @default(autoincrement())
    price Float
    size Int?
    pizzaType Int?

    product Product @relation(fields: [productId], references: [id])
    productId Int

    cartItems CartItem[] 

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Ingredient {
    id Int @id @default(autoincrement())

    name String
    price Float
    imageUrl String

    products Product[]
    cartItems CartItem[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Cart {
    id Int @id @default(autoincrement())

    user User? @relation(fields: [userId], references: [id])
    userId Int? @unique

    token String

    items CartItem[]

    totalPrice Float @default(0)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model CartItem {
    id Int @id @default(autoincrement())

    productVariation ProductVariation @relation(fields: [productVariationId], references: [id])
    productVariationId Int

    cart Cart @relation(fields: [cartId], references: [id])
    cartId Int

    quantity Int @default(1)
    ingredients Ingredient[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Story {
    id Int @id @default(autoincrement())
    previewImageUrl String
    items StoryItem[]

    createdAt DateTime @default(now())
}

model StoryItem {
    id Int @id @default(autoincrement())

    storyId Int
    story Story @relation(fields: [storyId], references: [id])

    sourceUrl String
    createdAt DateTime @default(now())
}

model Order {
    id Int @id @default(autoincrement())

    user User? @relation(fields: [userId], references: [id])
    userId Int?

    token String
    totalPrice Float
    status OrderStatus
    paimentId String?

    items Json

    fullName String
    address String 
    email String
    phone String
    comment String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

enum OrderStatus {
    PENDING
    SUCCEEDED
    CANCELLED
}

model VerificationCode {
    id Int @id @default(autoincrement())

    user User @relation(fields: [userId], references: [id])
    userId Int @unique

    code String

    createdAt DateTime @default(now())

    @@unique([userId, code])
}

enum UserRole {
    USER
    ADMIN
}